1）、shell终端解释器当作人与计算机的翻译官，用户与linux的通信介质，除了能够支持变量和参数外
还提供了循环，分支等高级编程语言才有的控制特性。

shell脚本命令的工作方法：
    1、交互式  用户每输入一条命令就立即执行。
    2、批处理  事先编写完整的shell脚本，一次执行诸多命令。


2）、编写简单的脚本
    #!/bin/bash   //脚本声明，用来告诉系统使用哪种shell解释器来执行脚本
    pwd
    ls -al


    bash xxxx.sh 执行脚本

3)、判断用户的参数

    1、文件测试语句
        用指定条件判断文件是否存在或权限是否满足等情况的运算符

        操作符         作用
        -d              测试文件是否为目录类型
        -f              测试文件是否存在
        -w              测试文件是否有写权限
        -r              测试文件是否有读权限
        -x              测试文件是否有执行权限
        -f              测试文件是否是一般文件

        可通过shell解释器的内设$?变量显示上一条命令执行后的返回值
        如果返回值为0,则目录存在，否则返回非零的值，意味着目录不存在
        例：[ -d /usr/local ]
            echo $?
            0

    2、逻辑测试语句

        用于对测试结果进行逻辑分析，根据测试结果实现不同的效果
        逻辑与   &&        [ -d /usr/local ] && echo "是目录"  当前命令成功后才会执行后面的命令
        逻辑或   ||        [ $USER=root ] || echo "root账号"  当前命令失败后才会执行后面的命令
        逻辑非   !         原来测试是正确的，将变成错误，相反变成正确的

        例：
         [ $USER = wuxiaoyong ] && echo "wuxiaoyong账号"
         wuxiaoyong账号
         [ $USER = wuxiaoyong ] || echo "wuxiaoyong账号"
         [ $USER != wuxiaoyong ] && echo "wuxiaoyong账号" || echo "root"
         root


    3、整数值比较语句
        只能对数字的操作
        操作符         作用
        -eq             等于
        -ne             不等于
        -gt             大于
        -lt             小于
        -le             等于或小于
        -ge             大于或等于

    4、字符串比较语句
        判断字符串是否为空，或两个字符串是否相同
        操作符            作用
        =                   比较字符串内容是否相同
        !=                  比较字符串内容是否不同
        -z                  判断字符串内容是否为空

4)、流程控制语句
    4.1、if 条件测试语句

        if 条件表达式            if 目录不存在
            then  语句                then 创建目录
        fi                     fi

    4.2、for 条件循环语句

        for 变量名 in 取值列表     for 用户名 in 列表文件
        do                       do
            命令序列                    创建用户并设置密码
        done                     done

